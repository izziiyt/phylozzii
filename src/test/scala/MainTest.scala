
import breeze.linalg.DenseVector
import org.scalatest.FunSuite

class MainTest extends FunSuite {

  import fdur._
  import biformat._
  import main._
  import util.doubleEqual
  val nh = ModelTree.fromFile("src/test/resources/fdur/test3.nh")
  val cols = fdur.readMaf(MafIterator.fromSource(bigSource("src/test/resources/fdur/tmp.maf"),"hg19"), 1000)
  val param = Parameters.fromFile("src/test/resources/fdur/testparam.txt")
  val gdparam = param.asGD

  test("EM") {
    val (mytree, myparam, lgl, it) = Optimizer.em(100, nh, cols, param)
    assert(doubleEqual(lgl, -262.56426106867326, 1.0E-4))
    assert(it == 23)
    assert(doubleEqual(myparam.Bvec,DenseVector(0.9029772880659012, 1.549645515313852, 0.23144634780985607,
      0.40949485620945203, 3.4420723289179946, 1.193334278097425),1.0E-4))
    assert(doubleEqual(myparam.pi, DenseVector(0.2890996541686653, 0.3172885290203346, 0.1401237309627439, 0.2534880858482561),1.0E-4))
    assert(doubleEqual(mytree,List(0.032353266722865, 0.09449610185696634, 0.08804052823361941),1.0E-4))
  }
  test("GD") {
    val (mytree, myparam, lgl) = Optimizer.gd(100, nh, cols, gdparam)
    assert(doubleEqual(lgl, -262.5642610724553, 1.0E-4))
    assert(doubleEqual(myparam.Bvec,DenseVector(0.9029786541479242, 1.5496048487228964, 0.23145504241858905,
      0.4095163462146755, 3.442054330508882, 1.193370983100064),1.0E-4))
    assert(doubleEqual(myparam.pi, DenseVector(0.28909961284968816, 0.3172888659692541, 0.1401235350513622, 0.2534879861296956),1.0E-4))
    assert(doubleEqual(mytree, List(0.032353163523556674, 0.0944956917657327, 0.08804007063814091), 1.0E-4))
  }
  test("LDEM") {
    val (mytree, myparam, lgl, it) = Optimizer.ldem(100, nh, cols, param)
    assert(doubleEqual(lgl, -262.56426106867326, 1.0E-4))
    assert(it == 23)
    assert(doubleEqual(myparam.Bvec, DenseVector(0.9029772880659016, 1.5496455153138498, 0.23144634780985265,
      0.4094948562094516, 3.442072328917995, 1.1933342780974254),1.0E-4))
    assert(doubleEqual(myparam.pi, DenseVector(0.28909965416866534, 0.3172885290203347, 0.14012373096274386, 0.2534880858482562),1.0E-4))
    assert(doubleEqual(mytree, List(0.032353266722864926, 0.09449610185696637, 0.08804052823361927), 1.0E-4))
  }
  test("LDGD") {
    val (mytree, myparam, lgl) = Optimizer.ldgd(100, nh, cols, gdparam)
    assert(doubleEqual(lgl, -262.5642610724553, 1.0E-4))
    assert(doubleEqual(myparam.Bvec, DenseVector(0.9029786529885385, 1.549604848371667, 0.23145504373754897,
      0.40951634630331124, 3.442054332750641, 1.1933709819026477),1.0E-4))
    assert(doubleEqual(myparam.pi, DenseVector(0.28909961301778464, 0.3172888658504728, 0.14012353506358088, 0.2534879860681617),1.0E-4))
    assert(doubleEqual(mytree, List(0.03235316347212327, 0.0944956917371125, 0.08804007060600447), 1.0E-4))
  }
}
  /*
  test("EM and GD ver 3") {
    val nh = ModelTree.fromFile("src/test/resources/fdur/fdur.nh")
    val cols = Maf.readMaf("src/test/resources/fdur/fdur.maf", 1000).toParArray
    var nhx = nh
    var colsx = cols
    val m = nhx.leafLength
    for (i <- m until 33 by -1) {
      println(i)
      try {
        val (emtree, empara, emlgl, emit) = Optimizer.em(10000, nhx, colsx, param)
        //val (gdtree, gdpara, gdlgl) = Optimizer.gd(10000, nhx, colsx, gdparam)
        val (ldemtree, ldempara, ldemlgl, ldemit) = Optimizer.ldem(10000, nhx, colsx, param)
        //val (ldgdtree, ldgdpara, ldgdlgl) = Optimizer.ldgd(10000, nhx, colsx, gdparam)
        val emR = Model(empara).R
        val ldemR = Model(ldempara).R
        //val gdR = Model(gdpara).R
        //val ldgdR = Model(ldgdpara).R
        val wr = new PrintWriter("target/" + i + "r.txt")
        wr.println(emR.toArray.mkString(","))
        wr.println(ldemR.toArray.mkString(","))
        //wr.println(gdR.toArray.mkString(","))
        //wr.println(ldgdR.toArray.mkString(","))
        wr.close()
        val wb = new PrintWriter("target/" + i + "b.txt")
        wb.println(emtree.mkString(","))
        wb.println(ldemtree.mkString(","))
        //wb.println(gdtree.mkString(","))
        //wb.println(ldgdtree.mkString(","))
        wb.close()
        val w = new PrintWriter(new FileWriter("target/lgl.txt", true))
        //w.println(Array(emlgl, ldemlgl, gdlgl, ldgdlgl).mkString(","))
        w.close()
        val wx = new PrintWriter(new FileWriter("target/iteration.txt", true))
        wx.println(Array(emit, ldemit).mkString(","))
        wx.close()
      }
      catch {
        case e: Throwable => println("at " + i + ":: " + e)
      }
      nhx = nhx.init
      colsx = colsx.map(x => x.init)
      /*val phytree = ModelTree.fromString("(hg18:0.00392848,panTro2:0.00334377,gorGor1:0.00779322);")
      val phyR = DenseMatrix((-0.996772, 0.185242, 0.642592, 0.168938),
        (0.153957, -0.989008, 0.253607, 0.581444),
        (0.541859, 0.257307, -0.912752, 0.113585),
        (0.191254, 0.792014, 0.152495, -1.135764))

      val f = Figure()
      val p = f.subplot(0)
      val x = DenseVector(Array.range(0, br.length).map(_.toDouble))
      p += plot(x, DenseVector(emtree.toArray), '+')
      p += plot(x, DenseVector(ldemtree.toArray), '+')
      p += plot(x, DenseVector(gdtree.toArray), '.')
      p += plot(x, DenseVector(ldgdtree.toArray), '.')
      p.xlabel = "branch index"
      p.ylabel = "value"
      val p2 = f.subplot(2, 1, 1)
      val x2 = DenseVector(Array.range(0, 16).map(_.toDouble))
      p2 += plot(x2, emR.toDenseVector, '+')
      p2 += plot(x2, ldemR.toDenseVector, '+')
      p2 += plot(x2, gdR.toDenseVector, '.')
      p2 += plot(x2, ldgdR.toDenseVector, '.')
      p2.xlabel = "R index"
      p2.ylabel = "value"
      f.saveas("target/" + n + ".png")
      */
    }
  }
  test("hoge"){
    val files = new File("/home/yuto/huga/phylonh").listFiles()
    for(f <- files){
      val s = Source.fromFile(f)
      val x = s.getLines().fold("")(_ + _)
      val tree = ModelTree.fromString(x)
      val w = new PrintWriter("target/phylonh/" + f.getName)
      w.println(tree.branches.mkString(","))
      w.close()
    }
  }
}
test("em&gd"){
    val cols = Maf.readMaf("src/test/resources/fdur/hoge33.maf",1000).toParArray
    val nh = ModelTree.fromFile("src/test/resources/fdur/hoge33.nh")
    val (emtree, empara) = Optimizer.em(1000,nh,cols,param)
    val (gdtree, gdpara) = Optimizer.gd(1000,nh,cols,gdparam)
    println(emtree)
    println(gdtree)
    println(empara)
    println(gdpara)
  }*/
  /*test("fdur.nh && fdur.maf"){
    val nh = "src/test/resources/fdur/fdur.nh"
    val maf = "src/test/resources/fdur/fdur.maf"
    val oribranch = ModelTree.fromFile(nh).branches
    val pi = DenseVector(0.23137857635453807, 0.28408070157281884, 0.27729375318455474, 0.20724696888808836)
    val b = DenseVector(0.6586096484894902, 2.329377965568423, 0.8207872557873153, 0.9101830004835019, 2.7967009808428305, 0.5488972207907554)
    val oriR = Model(Parameters(b, pi)).R
    val phyloFitpi = DenseVector(0.237118, 0.277034, 0.271539, 0.214309)
    val phyloFitlgl = -149597.338007
    val phyloFitTree = ModelTree.fromString("(((((((((((((((((hg18:0.00390535,panTro2:0.00342466):0.00174157,gorGor1:0.00608027):0.00589362,ponAbe2:0.0152518):0.00614714,rheMac2:0.0249772):0.0126814,calJac1:0.0524466):0.0427622,tarSyr1:0.0907546):0.00511376,(micMur1:0.0511858,otoGar1:0.084799):0.0331766):0.0129697,tupBel1:0.136038):0.00441703,(((((mm9:0.0428934,rn4:0.0444941):0.12316,dipOrd1:0.128492):0.0294094,cavPor3:0.131532):0.0109285,speTri1:0.124952):0.0263487,(oryCun1:0.0822679,ochPri2:0.163033):0.075949):0.0168081):0.0270982,(((vicPac1:0.0750045,(turTru1:0.0396072,bosTau4:0.064478):0.0120592):0.0212053,((equCab2:0.0629226,(felCat3:0.0586419,canFam2:0.0421736):0.0332806):0.00474687,(myoLuc1:0.106576,pteVam1:0.069563):0.025541):0.000818854):0.00742878,(eriEur1:0.161862,sorAra1:0.167363):0.0727508):0.0274296):0.0127911,(((loxAfr2:0.0568017,proCap1:0.115403):0.0165458,echTel1:0.195213):0.0441114,(dasNov2:0.0793843,choHof1:0.0735249):0.049083):0.0200907):0.144024,monDom4:0.250851):0.0607343,ornAna1:0.209931):0.0497305,((galGal3:0.067314,taeGut1:0.0411634):0.0735401,anoCar1:0.269246):0.0819697):0.0618427,xenTro2:0.220942):0.0786431,(((tetNig1:0.0831341,fr2:0.0585228):0.0908991,(gasAcu1:0.0744971,oryLat2:0.123791):0.0361884):0.16552,danRer5:0.322268):0.0784432):0.0,petMar1:0.308722);")
    val phyloFitbrnch = phyloFitTree.branches
    val phyloR = DenseMatrix((-1.037747,    0.226569,    0.666483,    0.144695),
      (0.193924,   -0.927837,    0.214848,    0.519065),
      (0.581998,    0.219196,   -0.987587,    0.186393),
      (0.160094,    0.670986,    0.236168,   -1.067248) )
    val krypi = DenseVector(0.26375328143435972,0.24618387560234775,0.2405650529813031,0.24949778998198935)
    val kryb = DenseVector(0.82267865072260782,2.466379816605059,0.59492428047577839,0.9198645987634092,2.3705777570301034,0.84733371118152723)
    val krytree = ModelTree.fromString("(((((((((((((((((hg18:0.0038712478608118337,panTro2:0.0033966052743735404):0.0017210352035714239,gorGor1:0.0060266906836859771):0.0058322567335449514,ponAbe2:0.015129768119812072):0.0060639037747040603,rheMac2:0.024743050779338638):0.012549276255683937,calJac1:0.051986041038003909):0.041714988362184839,tarSyr1:0.090153000685856646):0.0053774849720304779,(micMur1:0.050976778292494744,otoGar1:0.084284893371154593):0.032591527057817989):0.012549797903102939,tupBel1:0.1347997501602681):0.0044556506880791798,(((((mm9:0.04289269820066946,rn4:0.04428235960331154):0.12256198383697471,dipOrd1:0.12825647405925045):0.028506031643481124,cavPor3:0.13036025367010298):0.01096647639595767,speTri1:0.12512509143973641):0.025415660232201591,(oryCun1:0.080591052167369254,ochPri2:0.15868436979707715):0.075154645362831923):0.015965169794355485):0.025842517359318837,(((vicPac1:0.074378476109838249,(turTru1:0.039079912522048628,bosTau4:0.063798757996742686):0.011924693032982879):0.020527245375749133,((equCab2:0.06200106801168867,(felCat3:0.058364270924577709,canFam2:0.041795530183012873):0.032504008183400795):0.0044453723485332027,(myoLuc1:0.1053422238004719,pteVam1:0.069081106022699679):0.025232593050103308):0.00087071809890752446):0.0074765418645253287,(eriEur1:0.16156795259273227,sorAra1:0.16582363478718798):0.071035030810358529):0.026642737991120314):0.013303253043544117,(((loxAfr2:0.056309291747186831,proCap1:0.11385565988485748):0.01711790484159777,echTel1:0.19298772191700198):0.042348511015047739,(dasNov2:0.078223389095947171,choHof1:0.07296649353086819):0.047075224932835849):0.018399916677320698):0.13489760510217469,monDom4:0.25123103679190079):0.046421613777038621,ornAna1:0.21941523559863568):0.04774096433970608,((galGal3:0.063304131449663972,taeGut1:0.050889377551657955):0.080060726432756524,anoCar1:0.24653932934574263):0.082806810923638369):0.048028118325479083,xenTro2:0.2408870729539368):0.082440854640119798,(((tetNig1:0.089077352388325717,fr2:0.082292026704934393):0.080384089875649406,(gasAcu1:0.10099187462006658,oryLat2:0.13831767872222389):0.034971901279222346):0.10933745518692946,danRer5:0.25467296150162694):0.099036662827716518):0,petMar1:0.5616766454198765);")
    val krybrnch = krytree.branches
    val kryR = Model(Parameters(kryb,krypi)).R
    val mygdbrnch = List(0.00387009042456805, 0.0033961819651761693, 0.0017204385672641136, 0.006025061083139143, 0.005831535229121633, 0.015127794904954046, 0.006049604607055687, 0.024744202697539425, 0.012564962975304537, 0.0519696787735972, 0.04223775564775963, 0.09048844042878687, 0.004719707904828472, 0.0508155988357742, 0.0843522441099805, 0.0327848006952343, 0.012825349672109385, 0.1349155804612692, 0.004148482923001319, 0.042876533037314, 0.044290100413906276, 0.12261868400616667, 0.12823358150431838, 0.028691004876149943, 0.13059152488114056, 0.010482926772798957, 0.1252008850440978, 0.025770961022354412, 0.08104519042307036, 0.1593096908323115, 0.07443066364300147, 0.01580997830503201, 0.02592487907478772, 0.07448581984223075, 0.039079721114259884, 0.06378594074773543, 0.011902743805952486, 0.020571284373294585, 0.061993002528670245, 0.05851429009731741, 0.04162998340429954, 0.03266164033874709, 0.004471398363061445, 0.10533908404678537, 0.06908775309075157, 0.025251955031092944, 7.669167998627108E-4, 0.007337649015471243, 0.16133867304341995, 0.16701132783714218, 0.07125313812155118, 0.026794680225257054, 0.01283854553789949, 0.05644883401971762, 0.11399274372143715, 0.016654429554428488, 0.1933412424717179, 0.04260357628878169, 0.07772086400815126, 0.07315286037494281, 0.047575868114551056, 0.018656703674376905, 0.13622004276902008, 0.2509939433829721, 0.05802207836372119, 0.2072836475987321, 0.04736095180521815, 0.06398548000804873, 0.044890664487970085, 0.07518024850650384, 0.26950736423544974, 0.08382362417871775, 0.0592238553397513, 0.2261449695816086, 0.07743281376824776, 0.08064119300737563, 0.059852739016512, 0.09063408018657536, 0.07419521943285307, 0.12244752552033736, 0.03439406023281181, 0.15958225543175014, 0.33994801545269376, 0.07826275465367918, 0.0, 0.2922979090035733)
    val mygdpi = DenseVector(0.26380683911679587, 0.24640432955941052, 0.23999616555768957, 0.2497926657661041)
    val mygdb = DenseVector(0.8218480994470997, 2.4734862876176154, 0.5886328833574198, 0.9203858222621918, 2.369021383304364, 0.849783999333609)
    val mygdlgl = -149323.0
    val mygdR = Model(Parameters(mygdb,mygdpi)).R
    val myemb = DenseVector(0.7608472067973289,2.433610689993851,0.7840960915959433,0.9693614006454003,2.3944863913228236,0.662809299721435)
    val myempi = DenseVector(0.26432304646605526,0.2433199353270187,0.24644828250110523,0.24590873570582075)
    val myembranch = List(0.0024971645045018154,0.0030960759749493836,0.0011561235630533238,0.006409396005541419,0.005725154623896445,0.01742591929115939,0.008033741045478238,0.02116076305065678,0.01646849061428318,0.03731203113167523,0.03147682797333345,0.03714065227889885,0.016686448855499213,0.0346911198191995,0.03698601400259656,0.031136460656350187,0.019897108676683168,0.05564543757502381,0.017088978438151374,0.03325462063696049,0.03343904508266521,0.05549885677646793,0.05652026696921148,0.03456175168655953,0.05613174867497574,0.023314619696174946,0.055100727917543814,0.028982247138199167,0.03773405291503097,0.06343989073033295,0.04722052370139487,0.02314361142159547,0.0320668241910488,0.03534636719531201,0.03142038324080207,0.03974317412908475,0.01573412063789342,0.02053374124487472,0.03986235735862709,0.027694443317770635,0.030306688692921958,0.0279162329742367,0.009782324014672515,0.05024968779360031,0.04232031563533193,0.028157415881727918,1.725945744040376E-4,0.01801385700283274,0.06129993282244382,0.05290211901471176,0.049686305304805084,0.027708829248446493,0.02643990259275256,0.03401254305770241,0.055113252494523,0.029127864127436388,0.06606171155962644,0.035511895088144736,0.04085920772521921,0.034008539538628965,0.03612233266630682,0.026518201765534908,0.055731413553638004,0.06861729440550023,0.04245833124845213,0.06267548128032471,0.02818642669649333,0.026727487887545073,0.021493372420722953,0.03069165870417591,0.05476438842665361,0.030654371912971295,0.025957631547442,0.04991598546581199,0.026617312231787038,0.02359260964542909,0.021419756566283817,0.022203825637387174,0.024360230138132294,0.031163869401524307,0.016206541500240985,0.027480337800276432,0.044304751737811905,0.028379167814424087,0.03973850307755768,0.03965734245280561)
    val myemR = Model(Parameters(myemb, myempi)).R
    val x = {
      val f = Figure()
      val p = f.subplot(0)
      val x = DenseVector(Array.range(0, phyloFitbrnch.length).map(_.toDouble))
      p += plot(x, DenseVector(oribranch.toArray), '-')
      p += plot(x, DenseVector(phyloFitbrnch.toArray), '.')
      p += plot(x, DenseVector(krybrnch.toArray), '.')
      p += plot(x, DenseVector(mygdbrnch.toArray), '.')
      p += plot(x, DenseVector(myembranch.toArray), '.')
      p.xlabel = "branch index"
      p.ylabel = "value"
      f.saveas("target/brnch.png")
    }
    val y = {
      val f = Figure()
      val p = f.subplot(0)
      val x = DenseVector(Array.range(0, 16).map(_.toDouble))
      println(phyloR.toDenseVector)
      println(phyloR.toDenseVector.length)
      p += plot(x, oriR.toDenseVector, '-', name="original")
      p += plot(x, phyloR.toDenseVector, '.', name="original")
      p += plot(x, kryR.toDenseVector, '.', name="original")
      p += plot(x, mygdR.toDenseVector, '.', name="original")
      p += plot(x, myemR.toDenseVector, '.', name="original")
      p.xlabel = "R matrix index"
      p.ylabel = "value"
      f.saveas("target/R.png")
    }
  }*/

